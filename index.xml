<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Kubernetes during your Coffee Break on Kubernetes Camp</title>
    <link>https://k8s.camp/</link>
    <description>Recent content in Learn Kubernetes during your Coffee Break on Kubernetes Camp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://k8s.camp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Run your first application</title>
      <link>https://k8s.camp/getting-started/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.camp/getting-started/1/</guid>
      <description>Above all else Kubernetes is a platform for running applications. It takes applications in the form of Linux Containers and runs them in a special executable environment called a Pod.
A simple application such as NGINX can deploy to Kubernetes with a simple kubectl command. While this is not how you would deploy software into production, its a nice easy way to start getting familiar with Kubernetes.
Do Ask Kubernetes to run NGINX You can use the kubectl create command to create a Deployment which is a Controller that wraps around a Pod to provide functionality.</description>
    </item>
    
    <item>
      <title>2. Scale and upgrade your application</title>
      <link>https://k8s.camp/getting-started/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.camp/getting-started/2/</guid>
      <description>Part of Running an application is being able to scale it to meet traffic demands, and to upgrade it when new versions of the software is available.
Thankfully Kubernetes makes both of these things really easy. In the previous steps we ran an application by creating a Deployment. A Deployment is a Controller with special properties to help you both scale and upgrade your workload.
Do Validate your running workload We currently have a matching set of a Deployment, a ReplicaSet and a Pod in our cluster.</description>
    </item>
    
    <item>
      <title>3. Accessing apps via Services</title>
      <link>https://k8s.camp/getting-started/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.camp/getting-started/3/</guid>
      <description>So far we&amp;rsquo;ve installed KIND, run our first app, and learned how to scale that app. However still haven&amp;rsquo;t made the application accessible.
Do We can make it accessible by creating a Service which we can do with the kubectl expose command like so:
$ kubectl expose deployment first --type=LoadBalancer --port 80 service/first exposed  After a few moments we can check what resources are now running in Kubernetes with kubectl get all:</description>
    </item>
    
    <item>
      <title>Running Kubernetes - KIND</title>
      <link>https://k8s.camp/running-kubernetes/kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.camp/running-kubernetes/kind/</guid>
      <description>Kubernetes IN Docker (KIND) is part of the new wave of easy to use Kubernetes installers focused at people looking to learn, or use as a local development environment.
It&amp;rsquo;s great for just running a few applications, but is lacking support for some of the networking etc to handle some of our use cases.
For now we recommend using minikube to install Kubernetes locally.
However if you do want to use KIND you can follow these instructions.</description>
    </item>
    
    <item>
      <title>Running Kubernetes - Minikube</title>
      <link>https://k8s.camp/running-kubernetes/minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.camp/running-kubernetes/minikube/</guid>
      <description>Minikube is the original &amp;ldquo;run Kubernetes on your desktop without screwing everything up&amp;rdquo; tool. Minikube runs Kubernetes in a VM on your machine for users looking to just test Kubernetes out, or Develop against it.
We recommend using KIND (Kubernetes IN Docker), however if you can&amp;rsquo;t run Docker on your local machine minikube is the next best option.
macOS Install kubectl Obviously you&amp;rsquo;ll need kubectl installed to interact with Kubernetes.</description>
    </item>
    
  </channel>
</rss>